#include "ctest.h"
#include "polynomial.h"

    CTEST(suite1,test1)
    {
       Polynomial poly1 = createPolynomial(INTEGER,3);
        ((int *)poly1.values)[0]=2;
        ((int *)poly1.values)[1]=1;
        ((int *)poly1.values)[2]=3;
       Polynomial poly2 = createPolynomial(INTEGER,4);
        ((int *)poly2.values)[0]=1;
        ((int *)poly2.values)[1]=6;
        ((int *)poly2.values)[2]=7;
        ((int *)poly2.values)[3]=8;
       Polynomial poly3 = addpoly(poly1,poly2);
       Polynomial poly4 = addpoly(poly2,poly1);
       for(int i = 0; i<4; i++)
       {
           ASSERT_EQUAL(((int*)poly3.values)[i],((int*)poly4.values)[i]);
       }
       ASSERT_EQUAL(((int*)poly3.values)[0],3);
       ASSERT_EQUAL(((int*)poly3.values)[1],7);
       ASSERT_EQUAL(((int*)poly3.values)[2],10);
       ASSERT_EQUAL(((int*)poly3.values)[3],8);
    }
    CTEST(suite2,test2)
    {
        Polynomial poly1 = createPolynomial(REAL,3);
        ((double *)poly1.values)[0]=2.3;
        ((double *)poly1.values)[1]=1.7;
        ((double *)poly1.values)[2]=3.8;
        Polynomial poly2 = createPolynomial(REAL,4);
        ((double *)poly2.values)[0]=1.7;
        ((double *)poly2.values)[1]=6.8;
        ((double *)poly2.values)[2]=7.9;
        ((double *)poly2.values)[3]=8.7;
        Polynomial poly3 = addpoly(poly1,poly2);
        Polynomial poly4 = addpoly(poly2,poly1);
        for(int i = 0; i<4; i++)
        {
            ASSERT_EQUAL(((double*)poly3.values)[i],((double*)poly4.values)[i]);
        }
        ASSERT_EQUAL(((double*)poly3.values)[0],4.0);
        ASSERT_EQUAL(((double*)poly3.values)[1],8.5);
        ASSERT_EQUAL(((double*)poly3.values)[2],11.7);
        ASSERT_EQUAL(((double*)poly3.values)[3],8.7);
    }
    CTEST(suite3,test3)
    {
        Polynomial poly1 = createPolynomial(INTEGER,3);
        ((int *)poly1.values)[0]=2;
        ((int *)poly1.values)[1]=1;
        ((int *)poly1.values)[2]=3;
        int n = 7;
        Polynomial poly2 = scalarmultiply(poly1,n);
        ASSERT_EQUAL(((int*)poly2.values)[0],14);
        ASSERT_EQUAL(((int*)poly2.values)[1],7);
        ASSERT_EQUAL(((int*)poly2.values)[2],21);
    }
    CTEST(suite4,test4)
    {
        Polynomial poly1 = createPolynomial(REAL,3);
        ((double*)poly1.values)[0]=2.5;
        ((double*)poly1.values)[1]=1.7;
        ((double*)poly1.values)[2]=3.6;
        double n = 7.2;
        Polynomial poly2 = scalarmultiply(poly1,n);
        ASSERT_EQUAL(((double*)poly2.values)[0],18);
        ASSERT_EQUAL(((double*)poly2.values)[1],12.24);
        ASSERT_EQUAL(((double*)poly2.values)[2],25.92);
    }
    CTEST(suite5,test5)
    {
        Polynomial poly1 = createPolynomial(INTEGER,2);
        ((int*)poly1.values)[0]=2;
        ((int*)poly1.values)[1]=1;
        Polynomial poly2 = createPolynomial(INTEGER,3);
        ((int*)poly2.values)[0]=1;
        ((int*)poly2.values)[1]=5;
        ((int*)poly2.values)[2]=10;
        Polynomial poly3 = multiplypoly(poly1,poly2);
        Polynomial poly4 = multiplypoly(poly2,poly1);
        for(int i = 0; i<4; i++)
        {
            ASSERT_EQUAL(((int*)poly3.values)[i],((int*)poly4.values)[i]);
        }
        ASSERT_EQUAL(((int*)poly3.values)[0],2);
        ASSERT_EQUAL(((int*)poly3.values)[1],11);
        ASSERT_EQUAL(((int*)poly3.values)[2],25);
        ASSERT_EQUAL(((int*)poly3.values)[3],10);
    }
    CTEST(suite6,test6)
    {
        Polynomial poly1 = createPolynomial(REAL,2);
        ((double*)poly1.values)[0]=2.5;
        ((double*)poly1.values)[1]=1.5;
        Polynomial poly2 = createPolynomial(REAL,3);
        ((double*)poly2.values)[0]=1.0;
        ((double*)poly2.values)[1]=5.2;
        ((double*)poly2.values)[2]=10.5;
        Polynomial poly3 = multiplypoly(poly1,poly2);
        Polynomial poly4 = multiplypoly(poly2,poly1);
        for(int i = 0; i<4; i++)
        {
            ASSERT_EQUAL(((double*)poly3.values)[i],((double*)poly4.values)[i]);
        }
        ASSERT_EQUAL(((double*)poly3.values)[0],2.5);
        ASSERT_EQUAL(((double*)poly3.values)[1],14.5);
        ASSERT_EQUAL(((double*)poly3.values)[2],34.05);
        ASSERT_EQUAL(((double*)poly3.values)[3],15.75);
    }
    CTEST(suite7,test7)
    {
        Polynomial poly1 = createPolynomial(INTEGER, 3);
        ((int*)poly1.values)[0] = 2;
        ((int*)poly1.values)[1] = 1;
        ((int*)poly1.values)[2] = 3;
        int x = 7;
        int y = valuepoly(poly1, x);
        ASSERT_EQUAL(y, 156);
    }
    CTEST(suite8,test8)
    {
        Polynomial poly1 = createPolynomial(REAL, 3);
        ((double*)poly1.values)[0] = 2.5;
        ((double*)poly1.values)[1] = 1.2;
        ((double*)poly1.values)[2] = 3.7;
        int x = 3;
        int y = valuepoly(poly1, x);
        ASSERT_EQUAL(y, 39.4);
    }
    CTEST(suite9,test9)
    {
        Polynomial poly1 = createPolynomial(INTEGER, 3);
        ((int*)poly1.values)[0] = 2;
        ((int*)poly1.values)[1] = 1;
        ((int*)poly1.values)[2] = 1;
        Polynomial poly2 = createPolynomial(INTEGER, 3);
        ((int*)poly2.values)[0] = 1;
        ((int*)poly2.values)[1] = 5;
        ((int*)poly2.values)[2] = 10;
        Polynomial poly3 = compositionpoly(poly1, poly2);
        ASSERT_EQUAL(((int *) poly3.values)[0], 4);
        ASSERT_EQUAL(((int *) poly3.values)[1], 15);
        ASSERT_EQUAL(((int *) poly3.values)[2], 55);
        ASSERT_EQUAL(((int *) poly3.values)[3], 100);
        ASSERT_EQUAL(((int *) poly3.values)[4], 100);
    }
    CTEST(suite10,test10)
    {
        Polynomial poly1 = createPolynomial(REAL, 3);
        ((double*)poly1.values)[0] = 2.5;
        ((double*)poly1.values)[1] = 1.7;
        ((double*)poly1.values)[2] = 2.3;
        Polynomial poly2 = createPolynomial(REAL, 3);
        ((double*)poly2.values)[0] = 1.2;
        ((double*)poly2.values)[1] = 5.1;
        ((double*)poly2.values)[2] = 10.4;
        Polynomial poly3 = compositionpoly(poly1, poly2);
        ASSERT_EQUAL(((double *) poly3.values)[0], 7.852);
        ASSERT_EQUAL(((double *) poly3.values)[1], 36.822);
        ASSERT_EQUAL(((double *) poly3.values)[2], 134.911);
        ASSERT_EQUAL(((double *) poly3.values)[3], 243.984);
        ASSERT_EQUAL(((double *) poly3.values)[4], 248.768);
    }
int main(int argc, char **argv)
{
    return 0;
}